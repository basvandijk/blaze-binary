Roadmap for the future of the binary package
============================================

Note that this document is work in progress.

Integration of the blaze-builder work
-------------------------------------

The design of the blaze-builder is completed and there exist benchmarks
justifying many of the design decisions. The goal of the integration is
to replace the current implementation with the blaze-builder implementation
without changing the API (possible except for newtype constructor of PutM).

This involves the following four steps.

  1. Replace implementation hiding internals in Data.Binary.Builder.Internal.
  2. Provide test code comparing new to old implementation.
  3. Port benchmarks justifying design decisions.
  4. Cleanup documentation.

Once these steps are done, the API of the internals is used to implement the
required encoding functions for the Builder to be used as the core
representation for byte sequences to be output in the snap webserver.


Splitting of functionality
--------------------------

Currently, the binary package incorporates both support for building and
parsing bytestrings, as well as support for encoding and decoding Haskell
values. This funtionality could be split nicely into the following three parts.

  1. support for building bytestrings
     => Data.ByteString.Builder
     => Data.ByteString.Put

  2. support for parsing bytestring
     => attoparsec or something the like

  3. support for encoding and decoding standard haskell values
     => this is the job of the 'binary' package
     => Data.Binary.Encoding
          provides support for all sorts of encodings of standard Haskell
          values. For example
            - WordX in little-endian, big-endian, and host-endian encoding
            - Char, String, in Latin1, UTF-8, UTF-16, ...
            - Oct, Hex, Decimal, encoding of numbers w.r.t. Latin1, UTF-8, ..
     
     => Data.Binary.Decoding.{Word,Char.Utf8,Char.Utf16,...}
          provides support for the inverse functions of the encoding functions
          in Data.Binary.Encoding

     => Data.Binary
          provides a convenient standard binary encoding of Haskell values
          using the Binary typeclass and appropriate combinations of the 
          functions from Data.Binary.Encoding/Decoding



